#version 330 core

in vec4 fragPos;
in vec3 fragNormal;

out vec4 fragColor;

uniform vec3 viewPosition;
uniform vec3 lightDirection;

uniform vec3 waterColor;
uniform vec3 frozenWaterColor;
uniform bool isFrozen;

uniform int waveMapCount;
uniform sampler2D waveMaps[5];

void main()
{
    vec3 normal = normalize(fragNormal);
    vec3 view = normalize(viewPosition - vec3(fragPos));

    float incident = acos(dot(view, normal));
    float refraction = asin(0.75 * sin(incident));

    float reflectivity;
    if (abs(incident) >= 0.000001) {
        float t1 = sin(refraction - incident); 
        float t2 = sin(refraction + incident);
        float t3 = tan(refraction - incident);
        float t4 = tan(refraction + incident);
        reflectivity = 0.5 * (t1*t1/(t2*t2) + t3*t3/(t4*t4));
        if (reflectivity > 1.0) {
            reflectivity = 1.0;
        }
    } else {
        reflectivity = 0;
    }

    vec3 reflector = normalize(2 * dot(view, normal) * normal - view);
    float reflection = acos(dot(reflector, normal));

    float factor = (1 - reflectivity);
    
    if (isFrozen) {
       fragColor = reflection * vec4(frozenWaterColor, 0.33);
    } else {
        fragColor = reflectivity + factor * vec4(waterColor, 1.0);
    }

}